{"ast":null,"code":"import axios from 'axios';\nexport function fetchCommunityStreams() {\n  let streams = fetchStreams();\n  return {\n    streams: wrapPromise(streams)\n  };\n}\n\nfunction wrapPromise(promise) {\n  let status = \"pending\";\n  let result;\n  let suspender = promise.then(r => {\n    status = \"success\";\n    result = r;\n  }, e => {\n    status = \"error\";\n    result = e;\n  });\n  return {\n    read() {\n      if (status === \"pending\") {\n        throw suspender;\n      } else if (status === \"error\") {\n        throw result;\n      } else if (status === \"success\") {\n        return result;\n      }\n    }\n\n  };\n}\n\nconst fetchStreams = async () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      try {\n        axios.get('http://localhost:8080/twitch').then(res => {\n          resolve(res.data);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    }, 1100);\n  });\n};","map":{"version":3,"names":["axios","fetchCommunityStreams","streams","fetchStreams","wrapPromise","promise","status","result","suspender","then","r","e","read","Promise","resolve","setTimeout","get","res","data","err","console","log"],"sources":["/Users/louie/Desktop/dacommunity.tv/dacommunity.tv/src/api/api.tsx"],"sourcesContent":["import axios from 'axios';\n\nexport function fetchCommunityStreams() {\n    let streams = fetchStreams();\n    return { streams: wrapPromise(streams) };\n}\n\n\n  function wrapPromise(promise : Promise<any>) {\n    let status = \"pending\";\n    let result:any;\n    let suspender = promise.then(\n      (r) => {\n        status = \"success\";\n        result = r;\n      },\n      (e) => {\n        status = \"error\";\n        result = e;\n      }\n    );\n    return {\n      read() {\n        if (status === \"pending\") {\n          throw suspender;\n        } else if (status === \"error\") {\n          throw result;\n        } else if (status === \"success\") {\n          return result;\n        }\n      }\n    };\n  }\n\n\n  const fetchStreams = async () => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        try {\n          axios.get('http://localhost:8080/twitch').then((res) => {\n            resolve(res.data);\n          });\n        } catch(err) { console.log(err); }\n      }, 1100);\n    });\n  }"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,qBAAT,GAAiC;EACpC,IAAIC,OAAO,GAAGC,YAAY,EAA1B;EACA,OAAO;IAAED,OAAO,EAAEE,WAAW,CAACF,OAAD;EAAtB,CAAP;AACH;;AAGC,SAASE,WAAT,CAAqBC,OAArB,EAA6C;EAC3C,IAAIC,MAAM,GAAG,SAAb;EACA,IAAIC,MAAJ;EACA,IAAIC,SAAS,GAAGH,OAAO,CAACI,IAAR,CACbC,CAAD,IAAO;IACLJ,MAAM,GAAG,SAAT;IACAC,MAAM,GAAGG,CAAT;EACD,CAJa,EAKbC,CAAD,IAAO;IACLL,MAAM,GAAG,OAAT;IACAC,MAAM,GAAGI,CAAT;EACD,CARa,CAAhB;EAUA,OAAO;IACLC,IAAI,GAAG;MACL,IAAIN,MAAM,KAAK,SAAf,EAA0B;QACxB,MAAME,SAAN;MACD,CAFD,MAEO,IAAIF,MAAM,KAAK,OAAf,EAAwB;QAC7B,MAAMC,MAAN;MACD,CAFM,MAEA,IAAID,MAAM,KAAK,SAAf,EAA0B;QAC/B,OAAOC,MAAP;MACD;IACF;;EATI,CAAP;AAWD;;AAGD,MAAMJ,YAAY,GAAG,YAAY;EAC/B,OAAO,IAAIU,OAAJ,CAAaC,OAAD,IAAa;IAC9BC,UAAU,CAAC,MAAM;MACf,IAAI;QACFf,KAAK,CAACgB,GAAN,CAAU,8BAAV,EAA0CP,IAA1C,CAAgDQ,GAAD,IAAS;UACtDH,OAAO,CAACG,GAAG,CAACC,IAAL,CAAP;QACD,CAFD;MAGD,CAJD,CAIE,OAAMC,GAAN,EAAW;QAAEC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MAAmB;IACnC,CANS,EAMP,IANO,CAAV;EAOD,CARM,CAAP;AASD,CAVD"},"metadata":{},"sourceType":"module"}